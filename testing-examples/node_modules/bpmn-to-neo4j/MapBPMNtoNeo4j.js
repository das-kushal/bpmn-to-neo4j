export default (bpmnData) =>{
    const neo4jData = {
      nodes: [],
      relationships: [],
    };

    const sequenceFlows = [];
    const mapToFlow = {};

    const process = bpmnData.rootElement.rootElements[0];
    const references = bpmnData.references;

    process.flowElements.forEach((element)=>{
      if(element.$type === 'bpmn:Task'){
        const taskNode = {
          id: element.id,
          name: element.name || 'Unnamed Task',
          type: 'Task',
        };

        neo4jData.nodes.push(taskNode);
      } else if(element.$type === 'bpmn:StartEvent'){
        const startNode = {
          id: element.id,
          name: element.name || 'Start',
          type: 'StartEvent',
        };

        neo4jData.nodes.push(startNode);
      } else if(element.$type === 'bpmn:EndEvent'){
        const endNode = {
          id: element.id,
          name: element.name || 'End',
          type: 'EndEvent',
        };

        neo4jData.nodes.push(endNode);
      } else if(element.$type === 'bpmn:SequenceFlow'){
        const newSeq = {
          id: element.id,
          name: element.name || ''
        }
        mapToFlow[element.id] = sequenceFlows.length;
        sequenceFlows.push(newSeq);
      }
    })

    references.forEach((element)=>{
      if(element.property === 'bpmn:incoming'){
        const ind = mapToFlow[element.id];
        const target = {
          type: element.element.$type.substring(5),
          id: element.element.id
        }
        sequenceFlows[ind] = {
          ...sequenceFlows[ind],
          target: target
        }
      } else if(element.property === 'bpmn:outgoing'){
        const ind = mapToFlow[element.id];
        const source = {
          type: element.element.$type.substring(5),
          id: element.element.id
        }
        sequenceFlows[ind] = {
          ...sequenceFlows[ind],
          source: source
        }
      }
    })

    sequenceFlows.forEach((flowElement)=>{
      const relationship = {
        type: flowElement.name || 'RELATIONSHIP',
        source: flowElement.source,
        target: flowElement.target,
      };

      neo4jData.relationships.push(relationship);
    })
  
    // Iterate through BPMN processes
    // bpmnDefinitions.rootElements.forEach((element) => {
    //   if (element.$type === 'bpmn:Process') {
    //     const processNode = {
    //       id: element.id,
    //       name: element.name || 'Unnamed Process',
    //       type: 'Process',
    //     };
  
    //     neo4jData.nodes.push(processNode);
  
    //     // Iterate through BPMN tasks within the process
    //     element.flowElements.forEach((flowElement) => {
    //       if (flowElement.$type === 'bpmn:Task') {
    //         const taskNode = {
    //           id: flowElement.id,
    //           name: flowElement.name || 'Unnamed Task',
    //           type: 'Task',
    //         };
  
    //         neo4jData.nodes.push(taskNode);
  
    //         // Create a relationship between the process and the task
    //         const relationship = {
    //           type: 'CONTAINS',
    //           source: {
    //             type: processNode.type,
    //             id: processNode.id
    //           },
    //           target: {
    //             type: taskNode.type,
    //             id: taskNode.id
    //           },
    //         };
  
    //         neo4jData.relationships.push(relationship);
    //       } else if(flowElement.$type === 'bpmn:SequenceFlow'){
    //         const sourceTaskId = flowElement.sourceRef.id;
    //         const targetTaskId = flowElement.targetRef.id;
  
    //         const relationship = {
    //           type: 'SEQUENCE_FLOW',
    //           source: {
    //             type: 'Task',
    //             id: sourceTaskId
    //           },
    //           target: {
    //             type: 'Task',
    //             id: targetTaskId
    //           },
    //         };
  
    //         neo4jData.relationships.push(relationship);
    //       }
    //     });
  
        
    //   }
    // });

  
    return neo4jData;
  }